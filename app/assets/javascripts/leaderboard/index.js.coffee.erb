window.LeaderboardApp ||= angular.module('LeaderboardApp', [
  'templates',
  'ngResource',
  'ngAnimate',
  'ngRoute',
  'ngCookies',
  'ngResource',
  'ng-token-auth',
  'ng-rails-csrf',
  'ui.bootstrap',
  'chart.js',
  'angularjs-dropdown-multiselect',
  'angularFileUpload',
  'angularPayments'
  ]).config( ($routeProvider, $locationProvider, $authProvider, $httpProvider, $logProvider) ->
    $logProvider.debugEnabled(true);
    $routeProvider
      .when '/', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'indexInputsCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/signup', {
        templateUrl: 'leaderboard/templates/users/new.html',
        controller: 'newUserCtrl'
      }
      .when '/signin', {
        templateUrl: 'leaderboard/templates/user_sessions/new.html',
        controller: 'UserSessionsCtrl'}
      .when '/profile', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'editUsersCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin', 'user']
      }
      .when '/teams', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'indexTeamsCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/users', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'indexMembersCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/users/new', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'newMemberCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/users/:id/edit', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'editMemberCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/leaderboard', {
        templateUrl: 'leaderboard/templates/leaderboard/index.html',
        controller: 'leaderboardCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin', 'user', 'boardlogin']
      }
      .when '/input', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'indexInputsCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/records', {
        templateUrl: 'leaderboard/templates/records/index.html',
        controller: 'indexRecordsCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['user', 'admin']
      }
      .when '/board/login', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'loginBoardCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/board/settings', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'settingsBoardCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/buy/new/:plan', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'newBuyCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .otherwise {redirectTo: '/'}

    $locationProvider.html5Mode(true)

    $authProvider.configure
      apiUrl: '<%= ENV["AUTH_URL"]%>'

).run( ($rootScope, $location, Organization, $modal, Authorization, $timeout, $cookies, RedirectTo, subdomain) ->

  $rootScope.showLoading = true
  $rootScope.organization = {}
  $rootScope.redirectToSubdomain = false

  $rootScope.$on '$routeChangeStart', (event, next) ->
    $rootScope.showLoading = true;
    $rootScope.redirectToSubdomain = false

    unless $rootScope.organization
      $rootScope.organization = {id: $root}

    redirectToSubdomain()

    manageAccess(next)

  $rootScope.$on '$routeChangeError', (ev) ->
    $location.path('/signin')

  $rootScope.$on 'auth:validation-success', (ev) ->
    loadOrganization()

  $rootScope.$on 'auth:login-success', (ev) ->
    loadOrganization()

  $rootScope.$on 'auth:registration-email-success', (ev) ->
    subdomain = $cookies['subdomain']
    RedirectTo.subdomain(subdomain)

  $rootScope.$on 'auth:logout-success', (ev) ->
    $location.path('/signin')

  $rootScope.openBuyModal = ->
    modalInstance = $modal.open
      templateUrl: 'leaderboard/templates/buy/modal.html',
      controller: 'buyModalCtrl',
      size: 'lg'

  manageRoleAccess = ->
    if $rootScope.user.role == 'user'
      $location.path('/records')

    if $rootScope.user.role == 'boardlogin'
      $location.path('/leaderboard')

  loadOrganization = ->
    $rootScope.organization.id = $rootScope.user.organization_id

    Organization.get({id: $rootScope.user.organization_id }, (organization) ->
      $rootScope.organization = organization
    )

  manageAccess = (next) ->
    if !$rootScope.redirectToSubdomain
      if next.access != undefined
        authorised = next.access.requiredPermissions.indexOf($rootScope.user.role) > -1

        if !authorised
          $timeout( ->
            manageRoleAccess();
          , manageRoleAccessWaitTime())

      $timeout( ->
        $rootScope.showLoading = false;
      , showContentWaitTime())

  manageRoleAccessWaitTime = ->
    if $rootScope.user.role then 0 else 500

  showContentWaitTime = ->
    if $rootScope.user.role then 0 else 800

  redirectToSubdomain = ->
    if !subdomain and $cookies['subdomain']
      $rootScope.redirectToSubdomain = true
      RedirectTo.subdomain($cookies['subdomain'])

)
