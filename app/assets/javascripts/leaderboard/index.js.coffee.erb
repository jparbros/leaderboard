window.LeaderboardApp ||= angular.module('LeaderboardApp', [
  'templates',
  'ngResource',
  'ngAnimate',
  'ngRoute',
  'ngCookies',
  'ngResource',
  'ng-token-auth',
  'ng-rails-csrf',
  'ui.bootstrap',
  'chart.js',
  'angularjs-dropdown-multiselect',
  'angularFileUpload',
  'angularPayments',
  'willPaginate'
  ]).config( ($routeProvider, $locationProvider, $authProvider, $httpProvider, $logProvider) ->
    $logProvider.debugEnabled(true);
    $routeProvider
      .when '/', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'indexInputsCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/signup', {
        templateUrl: 'leaderboard/templates/users/new.html',
        controller: 'newUserCtrl'
      }
      .when '/signin', {
        templateUrl: 'leaderboard/templates/user_sessions/new.html',
        controller: 'UserSessionsCtrl'}
      .when '/profile', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'editUsersCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin', 'user']
      }
      .when '/teams', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'indexTeamsCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/users', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'indexMembersCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/users/new', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'newMemberCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/users/:id/edit', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'editMemberCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/leaderboard', {
        templateUrl: 'leaderboard/templates/leaderboard/index.html',
        controller: 'leaderboardCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin', 'user', 'boardlogin']
      }
      .when '/input', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'indexInputsCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/records', {
        templateUrl: 'leaderboard/templates/records/index.html',
        controller: 'indexRecordsCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['user', 'admin']
      }
      .when '/board/login', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'loginBoardCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/board/settings', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'settingsBoardCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/buy/new', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'newBuyCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .when '/billing', {
        templateUrl: 'leaderboard/templates/index.html',
        controller: 'billingCtrl',
        resolve:
          auth: ($auth) ->
            $auth.validateUser()
        access:
          requiredPermissions: ['admin']
      }
      .otherwise {redirectTo: '/'}

    $locationProvider.html5Mode(true)

    $authProvider.configure
      apiUrl: '<%= ENV["AUTH_URL"]%>'

).run( ($rootScope, $location, Organization, $modal, Authorization, $timeout, ipCookie, RedirectTo, subdomain, $interval, $auth, $q) ->

  $rootScope.showLoading = true
  $rootScope.organization = null
  $rootScope.redirectToSubdomain = false
  $rootScope.cookiesMessageViewed = ipCookie('cookiesMessageViewed') || false

  $rootScope.$watch('$auth.user', $rootScope.loadOrganization)

  $rootScope.$on '$routeChangeStart', (event, next) ->
    $rootScope.showLoading = true;
    $rootScope.redirectToSubdomain = false

    if $rootScope.leaderboardInterval
      $interval.cancel($rootScope.leaderboardInterval)

    redirectToSubdomain()
    manageOrganizationAccess(next, event)
    manageAccess(next)

  $rootScope.$on '$routeChangeError', (ev) ->
    $location.path('/signin')

  $rootScope.$on 'auth:validation-error', (ev) ->
    console.log(ev)

  $rootScope.$on 'auth:invalid', (ev) ->
    console.log(ev)

  $rootScope.$on 'auth:validation-success', (ev) ->
    loadOrganization()

  $rootScope.$on 'auth:login-success', (ev) ->
    loadOrganization()

  $rootScope.$on 'auth:registration-email-success', (ev) ->
    subdomain = ipCookie('subdomain')
    RedirectTo.subdomain(subdomain)

  $rootScope.$on 'auth:logout-success', (ev) ->
    $location.path('/signin')

  $rootScope.$on 'organization-loaded', (ev) ->
    manageOrganizationAccess()

  $rootScope.openBuyModal = ->
    modalInstance = $modal.open
      templateUrl: 'leaderboard/templates/buy/modal.html',
      controller: 'buyModalCtrl',
      size: 'lg'

  manageRoleAccess = ->
    if $rootScope.user.role == 'user'
      $location.path('/records')

    if $rootScope.user.role == 'boardlogin'
      $location.path('/leaderboard')

  loadOrganization = ->
    $rootScope.organization = $rootScope.user.organization
    $rootScope.$emit('organization-loaded')

  manageOrganizationAccess = (next, event) ->
    if $rootScope.organization && !$rootScope.organization.active
      if next
        if $location.$$path == '/buy/new' && next.$$route.originalPath != '/buy/new'
          event.preventDefault()
        else
          $location.path('/buy/new')
      else
        $location.path('/buy/new')

  manageAccess = (next) ->
    if !$rootScope.redirectToSubdomain
      if next.access != undefined
        authorised = next.access.requiredPermissions.indexOf($rootScope.user.role) > -1

        if !authorised
          $timeout( ->
            manageRoleAccess();
          , manageRoleAccessWaitTime())

      $timeout( ->
        $rootScope.showLoading = false;
      , showContentWaitTime())

  manageRoleAccessWaitTime = ->
    if $rootScope.user.role then 0 else 800

  showContentWaitTime = ->
    if $rootScope.user.role then 0 else 800

  redirectToSubdomain = ->
    if !subdomain and ipCookie('subdomain')
      $rootScope.redirectToSubdomain = true
      RedirectTo.subdomain(ipCookie('subdomain'))

  $rootScope.markCookiesMessageViewed = ->
    $rootScope.cookiesMessageViewed = true
    ipCookie('cookiesMessageViewed', true, { path: '/', domain: 'rankingdesk.com' })
)
